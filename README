NAME
    Redis::DistLock - Distributed lock manager using Redis

SYNOPSIS
      use Redis::DistLock;
      my $rd = Redis::DistLock->new( servers => [qw[ localhost:6379 ]] );
      my $mutex = $rd->lock( "foo", 1000 );
      # ... critical section ...
      $rd->release( $mutex );

DESCRIPTION
    This is an implementation of the Redlock algorithm using Redis for
    distributed lock management.

METHODS
  new( ... )
    servers
        Array reference with servers to connect to or Redis objects to use.

    retry_count
        Maximum number of times to try to acquire the lock.

    retry_delay
        Maximum delay between retries in microseconds(?).

  lock( $resource, $ttl [ $value ] )
    Acquire the lock for the given resource with the given time to live
    until the lock expires. Without a given value will generate a unique
    identifier.

  release( $lock )
    Release the previously acquired lock.

SEE ALSO
    <http://redis.io/topics/distlock>

AUTHOR
    Simon Bertrang, <janus@cpan.org>

COPYRIGHT AND LICENSE
    Copyright (C) 2014 by Simon Bertrang

    This library is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

